#!/bin/sh
# -*- coding: utf-8 -*- vim: et noet ci pi sts=0 sw=4 ts=4
{
# TODO: Wider testing

abort() {
exec 2>/dev/null
printf -- '\n'
exec >/dev/null
exit 130
}

trap -- 'abort' INT
set -u

echo() {
printf -- '%s\n' "${@}"
}

echon() {
printf -- '%s' "${@}"
}

askauth() {
case "${user:-""}" in
	"")
		echon "Username: " 1>&2
		if ! read -r "user"; then return 1; fi
		case "${user:-""}" in
			"")
				echo_err "auth: No username provided"
				exit 1
			;;
			?*) :;;
		esac
	;;
esac
case "${pass:-""}" in
	"")
		echon "Password: " 1>&2
		if ! read -r "pass"; then return 1; fi
		case "${pass:-""}" in
			"")
				echo_err "auth: No password provided"
				exit 1
			;;
			?*) :;;
		esac
	;;
esac
}

echoauth() {
if sslchk "${1:-""}"; then
	printf -- '%s' "-u ${user}:${pass}"
fi
}

echo_err() {
case "${2:-""}" in
	"")	printf -- '%s\n' "${name}: ${1:-"FAILED"}" 1>&2;;
	*)	printf -- '%s\n' "${name}: ${1:-"Unknown"}: ${2:-""}" 1>&2;;
esac
code=1
}

mkconf() {
if ! [ -d "${conf_dir}" ]; then
	if ! mkdir -p -- "${conf_dir}"; then
		echo_err "${conf_dir}" "Failed to make the config directory"
		exit 1
	fi
fi
if ! [ -e "${conf}" ]; then
	if touch -- "${conf}" "${conf_aria2}"; then
		if ! mkconf_sec_set; then exit 1; fi
	else
		echo_err "${conf}" "Failed to make the config file"
		exit 1
	fi
fi
mkconf_sec
}

mkconf_sec_set() {
if chown "${USER}:${USER}" -- "${2:-"${conf}"}"; then
	if ! chmod "${1:-"0600"}" -- "${2:-"${conf}"}"; then
		echo_err "${1}" "Cannot to set config${3:-" file"} permissions"
		return 1
	fi
else
	echo_err "${1}" "Failed to own the config${3:-" file"}"
	return 1
fi
}

mkconf_sec() {
local "i"
if ! [ -s "${conf}" ]; then
	if ! askauth; then exit 1; fi
fi
if [ -e "${conf}" ]; then
	i=$( cat -- "${conf}" 2>/dev/null )
	case "${i}" in
		""|":") if ! askauth; then exit 1; fi;;
	esac
else
	echo_err "${conf}" "Failed to find the config file"
	exit 1
fi
case "${i:-"x"}" in
	*?":"?*) return 0;;
	*)
		if mkconf_sec_set "0700" "${conf_dir}" " directory"; then
			if mkconf_sec_set; then
				printf -- '%s' "${user}:${pass}" > "${conf}"
			else
				exit 1
			fi
			if mkconf_sec_set "0600" "${conf_aria2}" " file (aria2c)"; then
				printf -- '%s\n' "http-user=${user}" "http-passwd=${pass}" > "${conf_aria2}"
			else
				exit 1
			fi
			return 0
		else
			exit 1
		fi
	;;
esac
}

auth_zero() {
local "i"
if [ -s "${conf}" ]; then
	echon "Are you sure? [y/n] " 1>&2
	if ! read -r "i"; then exit 1; fi
	case "${i:-""}" in
		[yY][eE][sS]|[yY]) :;; *) exit 1;;
	esac
	if ! rm -- "${conf}"; then code=1; fi
	if [ -s "${conf_aria2}" ]; then
		if ! rm -- "${conf_aria2}"; then code=1; fi
	fi
else
	exit 0
fi

rmdir -- "${conf_dir}" 2>/dev/null
case "${code:-"0"}" in
	0)
		echo_err "auth reset: successfully reset username/password"; exit 0;;
	1)
		echo_err "auth reset: failed to reset username/password"; exit 1;;
esac
exit 1
}

authset() {
local "i"
case "${user:-":"}:${pass:-":"}" in
	":::") :;;
	*"::"*) show_help 1 1>&2;;
	*?":"?*) return 0;;
esac
if [ -s "${conf}" ]; then
	i=$( cat -- "${conf}" 2>/dev/null )
	user="${i%%":"*}"
	pass="${i#*":"}"
else
	echo_err "${conf}" "No config file found"
	exit 1
fi
}

sslchk() {
case "${1:-"${cdn:-""}"}" in
	"https://"?*) return 0;;
	*)
		echo_err "${1:-"${cdn:-""}"}" "Is not using SSL"
		exit 1
	;;
esac
}

lsget() {
local "m" "i" "old_i" "type" "no_repeat"
no_repeat=""
m='<span class="filename">|<div class="title">'
curl --tlsv1.3 --user-agent "${agent}" --referer "${ref}" --silent --output - -- "${1}" \
| grep -E -- "${m}" | while read -r i; do
	i="${i%"</span>"*}"
	i="${i%%" Included</div>"*}"
	i="${i##*">"}"
	case "${no_repeat:-"<.>"}" in *"<:>${i}<:>"*) continue;; esac
	case "${i:-"###"}" in
		"${gg_i}"|"${gg_g}") type="downloads"; continue;;
		"${gg_p}") type="patches"; continue;;
		"${old_i:-"@@@"}") continue;;
		*";"*) i=$( echo "${i}" | sed "s/\&#039;/'/g; s/\&amp;/\&/g" );;
	esac
	case "${type:-"downloads"}|${i}" in
		"patches|"[pP][aA][tT][cC][hH]"_"*"."[eE][xX][eE]|"patches|"[pP][aA][tT][cC][hH]"_"*"."[bB][iI][nN])
			case "${always_include}" in
				*" ${i} "*) echo "${cdn}/${type:-"downloads"}/${ref##*"/"}/${i}";;
				*) continue;;
			esac
		;;
		"downloads|"*)
			echo "${cdn}/downloads/${ref##*"/"}/${i}"
		;;
		"patches|"*)
			echo "${cdn}/patches/${i}"
		;;
	esac
	old_i="${i}"
done
echo "END"
}

cdget_set_meta() {
local "meta"
meta=$( echoauth "${1:-"http://example.com"}" | curl --tlsv1.3 -A "${agent}" -I -s -K- -- "${1:-""}" 2>&1 )
case "${meta}" in
	"HTTP/2 404"*)
		echo_err "${1##*"/"}" "No such CDN file"
		return 1
	;;
	"HTTP/2 200"*)
		:
	;;
	"HTTP/2 401"*)
		echo_err "${1##*"/"}" "Incorrect username/password"
		no_meta_permission=1
		return 1
	;;
	*)
		echo_err "${1##*"/"}" "An unknown CDN error"
		return 1
	;;
esac
meta="${meta#*"content-length: "}"
meta="${meta%%"etag: "*}"
size="${meta%%?"
"*}"
date="${meta#*"last-modified: "}"
date="${date%%?"
"*}"
date=$( date -d "${date}" -- "+%Y%m%d%H%M.%S" 2>/dev/null )
}

cdget_no_space() {
local "free"
free=$( df --block-size=1 --output=avail -- "${PWD}" 2>/dev/null )
free="${free##*"Avail"?}"
free=$(( free - 33554432 ))
if [ "${free}" -lt "${size:-"0"}" ]; then
	echo "${1:-"unknown"}: No free space to download"
	echo "${1##*"/"}: FAILED"
	return 1
fi
}

cdnget_local_sfv() {
local "date" "size" "i"
case "${global_path:-""}" in "") return 1;; esac
if cdget_set_meta "${cdn}/sfv/${global_path%"/"}.sfv" 2>/dev/null; then
	local_sfv=$(
			echoauth | curl --tlsv1.3 -A "${agent}" -s -K- -- "${cdn}/sfv/${global_path%"/"}.sfv" | while read -r i; do
				echo "${global_path}${i}"
			done
		)
	case "${local_sfv}" in
		*?"/"?*"  "????????*) return 0;;
		*) unset -- "local_sfv"; return 1
	esac
else
	return 1
fi
}

cdnget() {
local "date" "size" "final_size" "c" "file" "local_sfv"
c=0
file="${cdnget_path:-""}${1##*"/"}"
if [ -s "${file}" ]; then
	return 0
fi
if sslchk "${1:-"http://example.com"}"; then
	if ! [ -s "${conf_aria2}" ]; then
		opt_www="curl"
	fi
	cdget_set_meta "${1}"
	case "${no_meta_permission:-"0"}" in 1) echo "${file}: FAILED"; return 1;; esac
	if ! cdget_no_space "${file}"; then return 1; fi
	( echo_err "downloading" "${file}"; )
	case "${opt_www:-"curl"}" in
		"curl")
			if [ -e "${file}.part.aria2" ]; then
				rm -f -- "${file}.part" "${file}.part.aria2" 2>/dev/null
			fi
			until echoauth "${1:-"http://example.com"}" | curl --tlsv1.3 -C- -K- --connect-timeout 60 --user-agent "${agent}" --referer "${ref}" --progress-bar --output "${file}.part" -- "${1}" 1>&2; do :; done
		;;
		"aria2c")
			if aria2c --min-tls-version=TLSv1.3 --continue=true --http-auth-challenge=true --conf-path="${conf_aria2}" --no-netrc=true --max-connection-per-server=4 --max-file-not-found=1 --max-tries=0 --timeout=60 --user-agent="${agent}" --referer="${ref}" --enable-color=false --log-level=error --console-log-level=error --summary-interval=0 --download-result=hide --out="${file}.part" -- "${1}" 1>&2; then
				echo
			else
				echo "${file}: FAILED"; return 1
			fi
		;;
	esac
else
	return 1
fi
until ! [ -e "${file}.aria2" ]; do
	sleep 1
	c=$(( c + 1 ))
	case "${c:-"0"}" in 10) break;; esac
done
case "${size:-"0"}" in
	0) :;;
	*)
		final_size=$( stat --printf='%s' -- "${file}.part" 2>/dev/null )
		case "${final_size:-"x"}" in
			"${size:-"y"}")
				if ! mv -- "${file}.part" "${file}"; then
					return 1
				fi
				case "${opt_crc:-"0"}|${file}" in
					1"|"?*"."[sS][fF][vV]) :;;
					1"|"?*)
						final_sfv=$( process_make_crc "${file}" )
						case "${file}" in
							*"/"*) :;;
							*) final_sfv="${global_path:-"?/"}${final_sfv}"
						esac
						case "${local_sfv:-"${global_sfv:-"${final_sfv%"  "*}"}"}" in
							*"${final_sfv%"  "*}"*)
								case "${local_sfv:-"${global_sfv:-"${final_sfv}"}"}" in
									*"${final_sfv}"*) :;;
									*)
										echo_err "${file}" "CRC32 checksum does not match"
										echo "${file}: FAILED"; return 1
									;;
								esac
							;;
						esac
					;;
				esac
				case "${opt_ggchk:-"0"}" in
					0) echo "${file}: OK";;
				esac
			;;
			*)
				cho_err "${file}" "Filesize does not match"
				echo "${file}: FAILED"; return 1
			;;
		esac
	;;
esac
case "${date:-"0"}" in
	0) :;;
	????????????"."??) touch -mt "${date}" -- "${file}" 2>/dev/null;;
esac
case "${opt_xattr:-"0"}" in
	1)
		setfattr -n "user.xdg.referrer.url" -v "${ref:-"${www}"}" -- "${file}" 2>/dev/null
		setfattr -n "user.xdg.origin.url" -v "${1:-"${cdn}"}" -- "${file}" 2>/dev/null
	;;
esac
return 0
}

logchk() {
local "i"
if type "nslookup" >/dev/null; then
	i=$( nslookup "${cdn#*"//"}" "1.1.1.1" 2>/dev/null )
	case "${i:-""}" in
		*"*** Can't find"*|*"** server can't find "*) echo_err "auth" "An incorrect CDN address"; return 1;;
		*"Name:	${cdn#*"//"}"*) :;;
		*) echo_err "auth" "No Internet connection"; return 1;;
	esac
fi
i=$( echoauth | curl --tlsv1.3 -A "${agent}" -I -s -w "########%{http_code}" -K- -- "${cdn}/sfv/fallout_classic.sfv" )
case "${i:-""}" in
	*"########200") return 0;;
	*"########401") echo_err "auth" "Incorrect username/password"; return 1;;
	*) echo_err "auth" "Cannot contact ${gg_name} CDN"; return 1;;
esac
}

pkgchk() {
if type "aria2c" >/dev/null 2>&1; then
	opt_www="aria2c"
else
	opt_www="curl"
fi
if ! type "b2sum" "${@}" "${opt_www:-"curl"}" >/dev/null 2>&1; then
	printf -- '%s\n' "${name}: please install: coreutils ${*}" 1>&2
	exit 1
fi
if type "7z" "tar" >/dev/null 2>&1; then
	opt_crc=1
fi
if type "ggchk" >/dev/null 2>&1; then
	opt_ggchk=1
fi
if type "setfattr" >/dev/null 2>&1; then
	opt_xattr=1
fi
}

rmslash_arg() {
case "${arg:-""}" in
	*"/")
		arg="${arg%"/"}"
	;;
esac
}

is_gg() {
case "${1}" in
	"${www}/game/"?*"/"*"/"*|"${cdn}/"?*"/"?*)
		return 0
	;;
	"${www}/game/"?*|"${cdn}/sfv/"?*|"${cdn}/"?*"/"?*"/"?*) return 0;;
	"${www}/"?*|"${cdn}/"?*)
		echo_err "${1}" "Is not a ${gg_name} download link"
		return 1
	;;
	"http://${www#*"https://"}/game/"?*|"http://${cdn#*"https://"}/"?*"/"?*)
		arg="https://${1#*"http://"}"
		return 0
	;;
	"${www#*"https://"}/game/"?*|"${cdn#*"https://"}/"?*"/"?*)
		arg="https://${1}"
		return 0
	;;
	"http://"?*|"https://"?*)
		echo_err "${1}" "Is not ${gg_name}"
		return 1
	;;
esac

if echo "${1}" | grep -E -- '^[0-9]$|^10$|^[0-9]{10}$' >/dev/null 2>&1; then
	echo_err "${1}" "GOG IDs are not supported"
	return 1
elif echo "${1}" | grep -E -- '^[0-9a-z\-_]+$' >/dev/null 2>&1; then
	arg="${www}/game/${1}"
	return 0
else
	echo_err "${1}" "Is not ${gg_name}"
	return 1
fi
return 1
}

is_file() {
case "${1:-""}" in
	*)
		if [ -d "${1}" ]; then
			echo_err "${1}" "Is a directory"
		elif [ -e "${1}" ]; then
			if [ -r "${1}" ]; then
				return 0
			else
				echo_err "${1}" "Permission denied"
			fi
		else
			echo_err "${1}" "No such file or directory"
		fi
	;;
esac
return 1
}

show_help() {
printf -- '%s\n' "Usage: ${name:-"${0##*"/"}"} [OPTION]... [URL/SLUG]...
Download files from ${gg_name} CDN.

  -u [USERNAME]  set your ${gg_name} CDN username
  -p [PASSWORD]  set your ${gg_name} CDN password
      --reset    reset username/password config
  -w [ADDRESS]   set the ${gg_name} address
      --no-dir   do not put files in a subdirectory
  -s, --sfv      update offline SFV database
  -h, --help     display this help and exit"
exit "${1:-"0"}"
}

process_slug() {
case "${1:-""}" in
	"${cdn}/patches/"?*)
		global_path=""
		unset -- "cdnget_path"
		return 1
	;;
	"${cdn}/downloads/"?*"/"?*)
		cdnget_path="${1#*"${cdn}/downloads/"}"
		cdnget_path="${cdnget_path#*"${cdn}/patches/"}"
		cdnget_path="${cdnget_path%%"/"*}"
		cdnget_path="${cdnget_path:-"unknown"}/"
		global_path="${cdnget_path}"
		case "${opt_no_dir:-"0"}" in
			1) unset -- "cdnget_path";;
		esac
		return 1
	;;
	"${cdn}/sfv/"?*"."[sS][fF][vV])
		cdnget_path="${1##*"/"}"
		cdnget_path="${cdnget_path%"."[sS][fF][vV]*}"
		cdnget_path="${cdnget_path:-"unknown"}/"
		global_path="${cdnget_path}"
		case "${opt_no_dir:-"0"}" in
			1) unset -- "cdnget_path";;
		esac
		return 1
	;;
	"${www}/game/"?*"/"?*|"${cdn}/"?*) return 1;;
	"${www}/game/"?*|"${www}/game/"?*"/")
		cdnget_path="${1#*"${www}/game/"}"
		cdnget_path="${cdnget_path%%"/"*}"
		cdnget_path="${cdnget_path:-"unknown"}/"
		global_path="${cdnget_path}"
		case "${opt_no_dir:-"0"}" in
			1) unset -- "cdnget_path"; return 0;;
		esac
		case "${PWD##*"/"}/" in
			"${cdnget_path}") unset -- "cdnget_path"; return 0;;
		esac
		if ! [ -d "${cdnget_path}" ]; then
			if ! mkdir -p -- "${cdnget_path}"; then
				echo_err "${1}" "FAILED"
			fi
		fi
	;;
esac
}

process_list_ggchk() {
local "i"
case "${opt_ggchk:-"0"}" in 0) return 0;; esac
case "${list:-""}" in
	"") echo_err "${gg_name}" "No filelist found"; code=1; return 1;;
esac
echo "${list}" | while read -r i; do
	case "${i}" in
		"${gg_i}"|"${gg_p}"|"${gg_g}") continue;;
		"END") return "${func_code:-"0"}";;
	esac
	if ! ggchk "${cdnget_path:-""}${i##*"/"}"; then func_code=1; fi
done
}

process_list() {
local "i"
case "${list:-""}" in
	"") echo_err "${gg_name}" "No filelist found"; code=1; return 1;;
esac
echo "${list}" | while read -r i; do
	case "${i}" in
		"${gg_i}"|"${gg_p}"|"${gg_g}") continue;;
		"END") return "${func_code:-"0"}";;
	esac
	if ! cdnget "${i}"; then func_code=1; fi
done
}

process() {
local "list" "cdnget_path" "global_path" "local_sfv"
unset -- "arg"
if process_slug "${1}"; then
	list=$( lsget "${1}" )
	case "${list:-""}" in
		"END")
			echo_err "${1##*"/"}" "No game files found"
			echo "${1##*"/"}: FAILED"
			return 1
		;;
	esac
	cdnget_local_sfv
	case "${no_meta_permission:-"0"}" in
		1)
			echo "${1##*"/"}: FAILED"
			return 1
		;;
	esac
	if process_list; then
		if ! process_list_ggchk; then
			code=1; return 1
		fi
	else
		code=1; return 1
	fi
else
	cdnget_local_sfv
	case "${no_meta_permission:-"0"}" in
		1) echo "${1##*"/"}: FAILED"
			return 1
		;;
	esac
 	if ! cdnget "${1}"; then code=1; return 1; fi
	case "${opt_ggchk:-"0"}" in
		1) if ! ggchk "${cdnget_path:-""}${1##*"/"}"; then code=1; return 1; fi;;
	esac
fi
}

process_make_crc_lowercase() {
case "${1:-""}" in
	[0-9]) echo "${1}";;
	A) echo "a";; D) echo "d";;
	B) echo "b";; E) echo "e";;
	C) echo "c";; F) echo "f";;
	*) return 1;;
esac
}

process_make_crc() {
local "i" "i_01" "i_02" "i_03" "i_04" "i_05" "i_06" "i_07" "i_08" "i_09" "i_10" "i_11" "i_12" "i_13" "i_14" "i_15" "i_16"
if ! i=$( 7z h -scrcCRC"${mode:-"32"}" -bb0 -bd -si -ba < "${1:-"/dev/stdin"}" 2>/dev/null ); then
	return 1
fi
i="${i:-""}"
i="${i%%" "*}"
case "${mode:-"32"}" in
	32)
		i_01="${i%%???????}"
		i_02="${i%%??????}"; i_02="${i_02##?}"
		i_03="${i%%?????}"; i_03="${i_03##??}"
		i_04="${i%%????}"; i_04="${i_04##???}"
		i_05="${i%%???}"; i_05="${i_05##????}"
		i_06="${i%%??}"; i_06="${i_06##?????}"
		i_07="${i%%?}"; i_07="${i_07##??????}"
		i_08="${i##???????}"
		i=""
	;;
	64)
		i_01="${i%%???????????????}"
		i_02="${i%%??????????????}"; i_02="${i_02##?}"
		i_03="${i%%?????????????}"; i_03="${i_03##??}"
		i_04="${i%%????????????}"; i_04="${i_04##???}"
		i_05="${i%%???????????}"; i_05="${i_05##????}"
		i_06="${i%%??????????}"; i_06="${i_06##?????}"
		i_07="${i%%?????????}"; i_07="${i_07##??????}"
		i_08="${i%%????????}"; i_08="${i_08##???????}"
		i_09="${i%%???????}"; i_09="${i_09##????????}"
		i_10="${i%%??????}"; i_10="${i_10##?????????}"
		i_11="${i%%?????}"; i_11="${i_11##??????????}"
		i_12="${i%%????}"; i_12="${i_12##???????????}"
		i_13="${i%%???}"; i_13="${i_13##????????????}"
		i_14="${i%%??}"; i_14="${i_14##?????????????}"
		i_15="${i%%?}"; i_15="${i_15##??????????????}"
		i_16="${i##???????????????}"
		i_09=$( process_make_crc_lowercase "${i_09}" )
		i_10=$( process_make_crc_lowercase "${i_10}" )
		i_11=$( process_make_crc_lowercase "${i_11}" )
		i_12=$( process_make_crc_lowercase "${i_12}" )
		i_13=$( process_make_crc_lowercase "${i_13}" )
		i_14=$( process_make_crc_lowercase "${i_14}" )
		i_15=$( process_make_crc_lowercase "${i_15}" )
		i_16=$( process_make_crc_lowercase "${i_16}" )
		i="${i_09}${i_10}${i_11}${i_12}${i_13}${i_14}${i_15}${i_16}"
	;;
esac
i_01=$( process_make_crc_lowercase "${i_01}" )
i_02=$( process_make_crc_lowercase "${i_02}" )
i_03=$( process_make_crc_lowercase "${i_03}" )
i_04=$( process_make_crc_lowercase "${i_04}" )
i_05=$( process_make_crc_lowercase "${i_05}" )
i_06=$( process_make_crc_lowercase "${i_06}" )
i_07=$( process_make_crc_lowercase "${i_07}" )
i_08=$( process_make_crc_lowercase "${i_08}" )
echo "${1:-"-"}  ${i_01}${i_02}${i_03}${i_04}${i_05}${i_06}${i_07}${i_08}${i}"
}

process_crc_main() {
case "${opt_crc:-"0"}" in
	0)
		printf -- '%s\n' "${name}: please install: 7z" 1>&2
		exit 1
	;;
esac
for i in "${@}"; do
	if is_file "${i}"; then
		process_make_crc "${i}"
	else
		code=1
	fi
done
exit "${code:-"0"}"
}

sfvchk() {
case "${opt_crc:-"0"}" in 0) return 0;; esac
if [ -s "${conf_sfv}" ]; then
	if ! gzip --test -- "${conf_sfv}" >/dev/null 2>&1; then
		rm -f -- "${conf_sfv}" 2>/dev/null
	fi
fi
}

sfv_to_ram() {
case "${opt_crc:-"0"}" in 0) return 0;; esac
if [ -s "${conf_sfv}" ]; then
	global_sfv=$( tar -xf "${conf_sfv}" -O --wildcards --no-anchored '*.[sS][fF][vV]' )
fi
}

sfvget() {
local "i"
case "${opt_crc:-"0"}" in 0) return 0;; esac
( echo_err "downloading" "${conf_sfv##*"/"}"; )
case "${opt_sfv:-"0"}" in
	1)
		sfv_base="${sfv_base##*"_if/"}"
	;;
esac
if curl --tlsv1.3 --connect-timeout 60 --user-agent "${agent}" --referer "${sfv_base#*"if_/"}" --progress-bar --output "${conf_sfv}" -- "${sfv_base:-""}"; then
	i=$( sha256sum -- "${conf_sfv}" )
	case "${opt_sfv:-"0"}" in
		1)
			sfv_base_sha="${i%%"  "*}"
		;;
	esac
	case "${i%%"  "*}" in
		"${sfv_base_sha:-""}")
			if mkconf_sec_set "0600" "${conf_sfv}" " file (SFV)"; then
				if gzip --test -- "${conf_sfv}" >/dev/null 2>&1; then
					echo "${name}: ${conf_sfv##*"/"}: OK" 1>&2
					return 0
				else
					rm -f -- "${conf_sfv}"
					echo "${name}: ${conf_sfv##*"/"}: FAILED" 1>&2
				fi
			else
				echo "${name}: ${conf_sfv##*"/"}: FAILED" 1>&2
				return 1
			fi
		;;
		*)
			rm -f -- "${conf_sfv}"
			echo_err "${conf_sfv##*"/"}: The web archive is corrupted"
			echo "${name}: ${conf_sfv##*"/"}: FAILED" 1>&2
			return 1
		;;
	esac
fi
}

set_auth_opt() {
case "${OPT:-""}" in
	u)
		case "${OPTARG:-""}" in
			"") echo_err "auth: No username provided"; exit 1;;
			"-"*) show_help 1 1>&2;;
			*) user="${OPTARG}";;
		esac

	;;
	p)
		case "${OPTARG:-""}" in
			"") echo_err "auth: No password provided"; exit 1;;
			"-"*) show_help 1 1>&2;;
			*) pass="${OPTARG}";;
		esac
	;;
	*) exit 1;;
esac
}

set_www_opt() {
case "${OPTARG:-""}" in
	"") echo_err "CDN: No address provided"; exit 1;;
	"-"*) show_help 1 1>&2;;
	*)
		www="${OPTARG}"
		case "${www}" in
			"ftp://"?*)
				www="${www#"ftp://"}"
			;;
			"ftps://"?*)
				www="${www#"ftps://"}"
			;;
			"sftp://"?*)
				www="${www#"sftp://"}"
			;;
			"http://"?*)
				www="${www#"http://"}"
			;;
			"https://"?*)
				www="${www#"https://"}"
			;;
		esac
		case "${www}" in
			"www."?*)
				www="${www#"www."}"
			;;
			"cdn."?*)
				www="${www#"cdn."}"
			;;
		esac
		www="${www%%"/"*}"
	;;
esac
cdn="https://cdn.${www#*"//"}"
}

main() {
local "name" "gg_name" "gg_i" "gg_p" "gg_g" "www" "cdn" "conf_dir" "conf" "conf_aria2" "agent" "conf_sfv" "LANG" "LC_ALL" "OPTERR" "OPTIND" "OPT" "OPTARG" "opt_www" "opt_ggchk" "global_sfv" "arg" "code"
LANG=C
LC_ALL=C
export "LANG" "LC_ALL"
OPTERR=0
OPTIND=1
name="${0##*"/"}"
gg_name="GOG Games"
gg_i="Game Items"
gg_p="Patch/Other Items"
gg_g="Goodies"
www="https://gog-games.com"
cdn="https://cdn.${www#*"//"}"
conf_dir="${HOME}/.local/share/ggcdn"
conf="${conf_dir}/id_gg"
conf_aria2="${conf_dir}/aria2.conf"
agent='GOG-Downloader (InDev)'
sfv_base="https://web.archive.org/web/20220827203612_if/https://codeload.github.com/GOG-Games-com/GOG.com-Game-Collection-Verification/tar.gz/refs/heads/main"
sfv_base_sha="b62a0dd74dfaf5a073a0cd279200dc4b1d4fc80e4ed8a9700ea1bd8aa9251ec1"
conf_sfv="${conf_dir}/sfv.tgz"
always_include=" patch_biomutant_1.3_(49718)_to_1.4_(51251).exe
 patch_caribbean_2.4.1.10.exe
 patch_dark_matter_2.0.1.4.exe
 patch_dragon_age_origins_ultimate_2.1.1.5.exe
 patch_giana_sisters_rise_of_the_owlverlord_2.1.1.9.exe
 patch_knock-knock_2.0.1.5.exe
 patch_planetbase_1.3.7_(38217)_to_1.3.8_(45490).exe
 patch_sr2_lang_selection_hotfix.exe
 patch_speedball_2_hd_2.0.2.4.exe
 patch_subject_13_2.0.1.2.exe
 patch_super_time_force_ultra_2.0.1.2.exe
 patch_slop_episode1_2.0.1.2.exe
 patch_slop_episode2_2.0.1.2.exe
 patch_slop_episode3_2.0.1.2.exe
 patch_the_guild2_pirates_2.0.1.5.exe
 patch_the_witcher_3_wild_hunt_-_game_of_the_year_edition_1.31_(A)_to_1.32.exe "
pkgchk "grep" "curl" "sed" # "nslookup" "ggchk" "aria2c" "7z" "gzip" "tar" "xattr"
while getopts ":-:p:u:w:h" "OPT"; do
	case "${OPT}" in
		-)
			case "${OPTARG}" in
				no-dir|no-directory|no-folder) opt_no_dir=1;;
				sfv) opt_sfv=1;;
				reset) auth_zero;;
				h|help) show_help;;
				*) show_help 1 1>&2;;
			esac
		;;
		u) set_auth_opt;;
		p) set_auth_opt;;
		w) set_www_opt;;
		h) show_help;;
		*) show_help 1 1>&2;;
	esac
done
shift $(( OPTIND - 1 ))
unset -- "OPT" "OPTARG"
OPTERR=1
OPTIND=1
case "${0##*"/"}" in
	crc32) process_crc_main "${@}"; exit 1;;
	crc64) mode=64; process_crc_main "${@}"; exit 1;;
esac
mkconf
sfvchk
case "${opt_sfv:-"0"}" in
	1) if ! sfvget; then exit 1; fi;;
	*)
		if ! [ -s "${conf_sfv}" ]; then
			if ! sfvget; then exit 1; fi
		fi
	;;
esac
unset -- "sfv_base" "sfv_base_sha"
case "${#}" in 0) exit 0;; esac
sfv_to_ram
authset; sslchk
if ! logchk; then exit 1; fi
for arg in "${@}"; do
	rmslash_arg
	if is_gg "${arg}"; then
		ref="${arg}"
		process "${arg}"
	else
		code=1
	fi
done
exit "${code:-"0"}"
}

main "${@}"
exit 1
}
